#!/usr/bin/env node
/**
 * @module www
 * @fileoverview Module to start a node server with some bindings built in.
 */

// DO NOT EDIT DIRECTLY!
// This module contains functions both auto-generated and hand-written. Only
// edit this module if you know and are sure of what you are doing.

/* eslint-disable no-restricted-globals */
/* eslint-disable no-console */


// Module dependencies.
const fs = require('fs');
const debug = require('debug')('server-template:server');
const http = require('http');
const path = require('path');
const app = require('../app');

// Global variables.

/**
 * @type {Number}
 * @access @private
 * @constant
 * @default
 * The first usuable port. A random port between this value (inclusive) and the
 * value from `URL_PORT_RANGE_END` will be selected and used.
 */
const URL_PORT_RANGE_START = 9500;

/**
 * @type {Number}
 * @private
 * @constant
 * @default
 * The last usable port in the range `URL_PORT_RANGE_START` to `URL_PORT_RANGE_END`.
 * A random port will be used (up to but not including this value) for the server.
 */
const URL_PORT_RANGE_END = 9525;


/**
 * @type {Number}
 * @access @private
 * @constant
 * @default
 * The default port to use if the `NODE_STATIC_PORT` environment variable is set
 * to a valid number greater than or equal to 3000.
 */
const URL_PORT_DEFAULT = process.env.NODE_STATIC_PORT
  && process.env.NODE_STATIC_PORT >= 3000
  && process.env.NODE_STATIC_PORT <= 9999
  ? process.env.NODE_STATIC_PORT
  : null;

/**
 * @type {String}
 * @private
 * @constant
 * @default
 * The log directory path.
 * NOTE: in the future, we should have stdout/stderr log files in `/var`. For
 * the scope of a super small project, we can have the log files in this directory.
 */
const LOG_DIR = path.join(__dirname, '../logs');

/**
 * @type {Array<String>}
 * @private
 * @constant
 * @default
 * The log files to create/use, which will reside in the log directory.
 */
const LOG_FILES = [
  path.join(LOG_DIR, 'stdout.log'),
  path.join(LOG_DIR, 'stderr.log'),
];

/**
 * @type {Boolean}
 * @private
 * @constant
 * @default
 */
const isProduction = process.env.NODE_ENV && process.env.NODE_ENV.indexOf('prod') > -1;

/**
 * @type {String}
 * @private
 * Pipe server setup values into string.
 */
let pipe;

/**
 * @type {Number}
 * @private
 * Get port from random generator (done below) and store in Express object
 * singleton.
 */
let port;


/**
 * @type {Object}
 * @access @private
 * Create a server using the Express server object created in `app`.
 */
let server;


// BEGIN NODE.JS DEPLOYMENT SCRIPT.


// Only do production steps if we're running in production. If we're just trying
// to test this application, there's no reason to do all the steps below.
if (!isProduction) {
  const runningEngine = process.env.NODE_RUNNER || 'node';

  if (runningEngine !== 'nodemon') {
    console.warn('Detected development/testing run of this script without using '
      + 'the command `npm run start:dev`. Please consider using this command '
      + 'instead of directly invoking this script!');
  }
}


console.log('Begin server deployment Node.js script...');


/**
 * @function normalizePort
 * @description Normalize a port into a number, string, or false.
 * @param {Number} val The value of the port to use.
 * @returns {Boolean|Number} False if we cannot normalize the port, or the number
 *    if we can.
 * @throws {Error} If `val` is not a `String` or a `Number`.
 */
const normalizePort = (val) => {
  const parsedPortVal = parseInt(val, 10);

  // If it's a string, it's a named pipe, so return it immediately. Otherwise,
  // return the `parsedPortVal` since it's a number.
  if (isNaN(parsedPortVal)) {
    return val;
  }
  if (parsedPortVal >= 0) {
    return parsedPortVal;
  }

  throw Error('Normalize port accepts either a string or a number, not ', typeof val);
};

/**
 * @function onError
 * @description Handle an error triggered from the server.
 * @param {Error} error The error object captured from the server.
 * @throws {Error} Throws the original error if we cannot handle the type of error
 *    caught.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${pipe}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};


/**
 * @function onListening
 * @description Server listening event handler. Called automatically after the
 *    server starts.
 */
const onListening = () => {
  const addr = server.address;
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug('Listening on ', bind);
};


/**
 * @function setupLoggingFiles
 * @description Create directory and files required for logging.
 */
const setupLoggingFiles = () => {
  // Make the directory.
  fs.mkdir(LOG_DIR, 0o777, (err) => {
    console.log('Making the log directory');
    if (err) {
      if (err.code === 'EEXIST') {
        console.error('Log directory already exists!\n'
          + 'No log directory will be (re)created.');
      }
      else {
        console.error('Error caught while trying to make log dir: ', err.message);
      }
    }

    // Generate log files by looping through the contents of `LOG_FILES` using
    // the Array#forEach method. We can optionally switch this to a more direct
    // for...of loop or a regular for loop if desired.
    console.log('Generating log files...');

    LOG_FILES.forEach((filePath) => {
      fs.writeFile(filePath, '', (logErr) => {
        if (logErr) {
          console.error('Error trying to create ', filePath);
          console.error('Perhaps it already exists?', logErr.message);
        }
      });
    });
    // End making a directory.
  });
};


/**
 * @function setupRedirectPipes
 * @description Redirect stdout, stderr and uncaught exceptions to log files.
 */
const setupRedirectPipes = () => {
  // Set up stdout, stderr redirects via WriteStream pipe.

  LOG_FILES.forEach((filePath) => {
    // Redirect pipe. Bind `this` to the respective write stream.

    const outputPipe = fs.createWriteStream(filePath);

    if (filePath.indexOf('stdout') > -1) {
      process.stdout.write = outputPipe.write.bind(outputPipe);
    } else {
      process.stderr.write = outputPipe.write.bind(outputPipe);
    }
  });

  process.on('uncaughtException', (err) => {
    console.error((err && err.stack) ? err.stack : err);
  });
};


/**
 * Set up port number for the server.
 */
port = URL_PORT_DEFAULT
  ? normalizePort(URL_PORT_DEFAULT)
  : normalizePort(Math.floor(Math.random()
    * (URL_PORT_RANGE_END - URL_PORT_RANGE_START))
    + (URL_PORT_RANGE_START));

console.log(`Free port captured: ${port}. Normalizing for 'Express' object use.`);
port = normalizePort(port);

app.set('port', port);
console.log('Port successfully set to ', port);

/**
 * Create HTTP server.
 */
server = http.createServer(app);

console.log('Server instance created.');


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening.bind(this, server));

console.log('Server successfully started on port ', port);

if (!isProduction) {
  console.log(`Website active on: http://localhost:${port}`);
}
// Set up stdout, stderr redirects if running in production.
else {
  /*
  console.log('All log statements will be piped to `stdout.log` or `stderr.log`.');
  setupLoggingFiles();
  setupRedirectPipes();
  */
}
