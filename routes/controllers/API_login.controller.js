/**
 * @module routes/controllers/user
 * @fileoverview User route's controller. Handle all business logic relative to
 *    a particular user or a set of users.
 * @exports {Object} Functions to attach to the `users` router.
 */


/**
 * @function login
 * @description Log a user in based on the received form data from the client.
 * @param {Object} req The request object generated by `Express`.
 * @param {Object} res The response object generated by `Express`.
 * @param {Function} next The function to call when this method is done executing
 *    and does not return or render anything (no `res` methods called).
 */
const login = (req, res, next) => {
  // Capture user-submitted form from client.
  //console.log(req);
  //console.log(req.body);
  var username = req.body["username"];
  var password = req.body["password"];

  console.log("API USERNAME: " + username);
  console.log("API PASSWORD: " + password);


  var mysql = require("mysql");


  con.connect(function(err) {
    if (err) throw err;
    console.log("Connected!");
  });


  statement = ("select * from account where username = '" + username + "'");
  var response = "";
  con.query(statement, function(err, result) {
    if (err) throw err;
    console.log(result);
    response = result;
    console.log(response[0]["username"]);
    console.log(response[0]["password"]);
    var db_username = response[0]["username"];
    var db_password = response[0]["password"];
    if (username == db_username && password == db_password) {
      console.log(":)");
    } else {
      console.log(">:(");
    }
  });



  // Example:
  // const { username, password } = req.body;

  // Do something with the username / password. Verify the password hash?
  // Check if the user exists? etc.

  // Redirect to another route or maybe render a different page?
  //res.render('market');
};

module.exports = {
  login,
};
