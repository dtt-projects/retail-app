/**
 * @module routes/controllers/API_addItem
 * @fileoverview API_addItem route's controller. Handle all business logic
 * relative to API_addItem for the users.
 * @exports {Object} Functions to attach to the `API_addItem` router.
 * @require read-hidden
 * @require session-helper
 * @require request
 */

 /* hidden
  * This is to read the hidden credentials file
  */
 const hidden = require('../../scripts/read-hidden.js');

 /* sessions
  * This is to help with handling sessions to maintain cart and auth
  */
 const sessions = require('../../scripts/session-helper.js');

 /* request
  * required package for request data from DB
  */
 const request = require('request');

 const mysql = require('mysql');

/**
 * @function placeOrder
 * @description Add an item into the IBM DB based on client form
 * @param {Object} req The request object generated by `Express`.
 * @param {Object} res The response object generated by `Express`.
 * @param {Function} next The function to call when this method is done executing
 *    and does not return or render anything (no `res` methods called).
 */
const placeOrder = (req, res, next) => {
  // make sure an admin is making the call
  console.log("API_placeOrder");
  var sessionId = req.cookies["sessionId"];
  sessions.handleSessionIsLoggedIn(sessionId)
    .then(isLoggedIn => {
      if (isLoggedIn) {
        // get aid so we can get suer info and ibm db info
        sessions.handleSessionGetSessionInfo(sessionId)
          .then(aid => {
            // read the hidden creds for DB connection
            hidden.readHidden()
              .then(json => {
                // log into database
                var con = mysql.createConnection({
                  host: json[0]["host"],
                  user: json[0]["user"],
                  password: json[0]["password"],
                  database: json[0]["database"]
                });
                con.connect(function(err) {
                  if (err) {
                    console.log(err);
                    res.status(400);
                    res.setHeader('Content-Type', 'plain/text');
                    res.send("Account creation failed!");
                  }
                });

                // get the ibm id that correspondes to the account id
                var statement = ("SELECT ibmid FROM ibm WHERE aid=" + aid);
                con.query(statement, function(err, result) {
                  if (err) {
                    console.log(err);
                    res.status(400);
                    res.setHeader('Content-Type', 'plain/text');
                    con.end();
                    res.send("Account creation failed!");
                    return;
                  } else {
                    var ibmId = result[0]["ibmid"];
                    con.end();

                    var options = { method: 'GET',
                      url: json[2]["apiUrl"] + 'Customer/' + ibmId,
                      headers:
                       { accept: 'application/json',
                         'x-ibm-client-secret': json[2]["ClientSecret"],
                         'x-ibm-client-id': json[2]["ClientId"] } };

                    request(options, function (error, response, body) {
                      if (error) {
                        console.error('Failed: %s', error.message);
                        return;
                      } else {
                        console.log(body);
                        var customerInfo = body;

                        var options = {
                          method: 'POST',
                          url: json[2]["apiUrl"] + 'Credit',
                          headers: {
                              accept: 'application/json',
                              'content-type': 'application/json',
                              'x-ibm-client-secret': json[2]["ClientSecret"],
                              'x-ibm-client-id': json[2]["ClientId"]
                          },
                          body: {
                              "customerId": ibmId,
                              "preferred": 1,
                              "address2": customerInfo["address2"],
                              "address1": customerInfo["address1"],
                              "city": customerInfo["citycode"],
                              "state": customerInfo["statecode"],
                              "zip": customerInfo["postcode"],
                              "company": req.body["cartType"],
                              "cardNum": req.body["cardNumber"],
                              "ccid": req.body["cvc"],
                              "expirationDate": req.body["monthExpr"] + '/' + req.body["yearExpr"] },
                          json: true };
                          console.log(req.body["monthExpr"] + '/' + req.body["yearExpr"]);

                        request(options, function (error, response, body) {
                          if (error) {
                            console.error('Failed: %s', error.message);
                            return;
                          } else {
                            //console.log('Success: ', body);
                            //var cardId = JSON.parse(body.toString()
                            sessions.handleSessionGetCart(sessionId)
                              .then(currentCart => {
                                // get each key and put into order
                                console.log("CART PROCESS");
                                console.log(currentCart);
                                var keys = Object.keys(currentCart);
                                keys.forEach(element => {
                                  var amount = currentCart[element];
                                  var options = { method: 'POST',
                                      url: 'https://api.us-south.apiconnect.appdomain.cloud/lasermusibmcom-dev/sb/Retail/PlaceOrder',
                                      headers:
                                       { accept: 'application/json',
                                         'content-type': 'application/json',
                                         'x-ibm-client-secret': json[2]["ClientSecret"],
                                         'x-ibm-client-id': json[2]["ClientId"] },
                                      body:
                                       { orderInfo:
                                          { orderDetail:
                                             { customerNumber: ibmId,
                                               itemID: element,
                                               itemQuantity: amount,
                                               creditCardNumber: req.body["cardNumber"],
                                               shippingName: 'Johnny Burgess',
                                               shippingAddress1: '108.232.189.108',
                                               shippingAddress2: '35.208.101.107',
                                               shippingState: 'GA',
                                               shippingCity: 'Zabmunpat',
                                               shippingZipCode: '18525' } } },
                                      json: true };

                                    request(options, function (error, response, body) {
                                      if (error) {
                                        return console.error('Failed: %s', error.message);
                                      } else {
                                          console.log('Success: ', body);
                                          res.status(200);
                                          res.redirect("/login");
                                      }
                                    });
                                })

                              }); // end getCart
                          }
                        });
                      }
                    });
                  }
                }); // close con.query
              }); // close read hidden
          }); // close get session info
      // user isnt logged into the system redirect to login page
      } else {
        console.log("Session Id: " + sessionId + " failed to order items not logged in.");
        res.status(403);
        res.send("/login");
      }
    })
};

// so other files can call this function
module.exports = {
  placeOrder,
};
