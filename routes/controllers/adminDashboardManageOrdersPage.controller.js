/**
 * @module routes/controllers/AdminDashboardManageOrdersPage
 * @fileoverview AdminDashboardManageOrdersPage route's controller.
 *    Exports functions to be used by each route handler.
 * @exports {Object} Functions to attach to the
 *    `AdminDashboardManageOrdersPage` router.
 * @require cookie-helper
 */

 /* cookies
  * This is to help with handle cookies for user validation
  */
 const cookies = require('../../scripts/cookie-helper.js');

/**
 * @function sendAdminDashboardManageOrdersPage
 * @description Send the base page rendered by `Handlebars.js`. Compilation
 *    of HBS templates is handled by the HBS engine.
 * @param {Object} req The request object generated by `Express`.
 * @param {Object} res The response object generated by `Express`.
 * @param {Function} next The function to call when this method is done executing
 *    and does not return or render anything (no `res` methods called).
 */
const sendAdminDashboardManageOrdersPage = (req, res, next) => {
  // checks and validates user's cookie
  cookies.handleNormalPageCookie(req.cookies)
    .then(res_cookie => {
      // if bad cookie send to login page
      if (res_cookie == "undefined" || res_cookie == null) {
        res.clearCookie("CID");
        res.redirect("../login");
      // if valid cookie check if admin or user
      } else {
        res.cookie("CID", res_cookie);
        if (res_cookie["isAdmin"] == 1) {

          // required package for request to DB
          var request = require("request");

          // setup the api call and point it towards a single item
          var options = {
            method: 'GET',
            url: 'https://api.us-south.apiconnect.appdomain.cloud/lasermusibmcom-dev/sb/capstone-1.0/Order',
            headers:
              { accept: 'application/json',
                'x-ibm-client-secret': json[2]["ClientSecret"],
                'x-ibm-client-id': json[2]["ClientId"] }
          };

          // if call fails log error and send back 400
          // if call successful send back the single item's data
          request(options, function (error, response, body) {
            if (error) {
              console.log("Failed getItem: " + error.message);
              res.status(400);
              res.setHeader('Content-Type', 'plain/text');
              res.send();
            } else {
              orders = JSON.parse(body.toString())["data"]["orderList"];
              console.log(orders);
              res.render('admin_dashboard-manage_orders', {
                title: 'Sprout Creek Farm Admin Dashboard | Orders',
                page: 'login',
                email: res_cookie["email"],
                "orders": orders});
            }
          });
        } else {
          res.redirect('user_dashboard')
        }
      }

    });
};

// exports so other files can use it
module.exports = {
  sendAdminDashboardManageOrdersPage,
};
